diff --git clang/include/clang/AST/APValue.h clang/include/clang/AST/APValue.h
index 6943479831e..7e68abd43f8 100644
--- clang/include/clang/AST/APValue.h
+++ clang/include/clang/AST/APValue.h
@@ -102,8 +102,8 @@ public:

   public:
     LValueBase() : Local{} {}
-    LValueBase(const ValueDecl *P, unsigned I = 0, unsigned V = 0);
-    LValueBase(const Expr *P, unsigned I = 0, unsigned V = 0);
+    LValueBase(const ValueDecl *P, size_t I = 0, unsigned V = 0);
+    LValueBase(const Expr *P, size_t I = 0, unsigned V = 0);
     static LValueBase getTypeInfo(TypeInfoLValue LV, QualType TypeInfo);

     template <class T>
@@ -121,7 +121,7 @@ public:

     explicit operator bool() const;

-    unsigned getCallIndex() const;
+    size_t getCallIndex() const;
     unsigned getVersion() const;
     QualType getTypeInfoType() const;

@@ -134,7 +134,8 @@ public:
   private:
     PtrTy Ptr;
     struct LocalState {
-      unsigned CallIndex, Version;
+      size_t CallIndex;
+      unsigned Version;
     };
     union {
       LocalState Local;
@@ -403,7 +404,7 @@ public:
   bool isLValueOnePastTheEnd() const;
   bool hasLValuePath() const;
   ArrayRef<LValuePathEntry> getLValuePath() const;
-  unsigned getLValueCallIndex() const;
+  size_t getLValueCallIndex() const;
   unsigned getLValueVersion() const;
   bool isNullPointer() const;

diff --git clang/lib/AST/APValue.cpp clang/lib/AST/APValue.cpp
index 1993bba9bd1..a8e8acdc82c 100644
--- clang/lib/AST/APValue.cpp
+++ clang/lib/AST/APValue.cpp
@@ -37,9 +37,9 @@ static_assert(
         alignof(Type),
     "Type is insufficiently aligned");

-APValue::LValueBase::LValueBase(const ValueDecl *P, unsigned I, unsigned V)
+APValue::LValueBase::LValueBase(const ValueDecl *P, size_t I, unsigned V)
     : Ptr(P), Local{I, V} {}
-APValue::LValueBase::LValueBase(const Expr *P, unsigned I, unsigned V)
+APValue::LValueBase::LValueBase(const Expr *P, size_t I, unsigned V)
     : Ptr(P), Local{I, V} {}

 APValue::LValueBase APValue::LValueBase::getTypeInfo(TypeInfoLValue LV,
@@ -50,7 +50,7 @@ APValue::LValueBase APValue::LValueBase::getTypeInfo(TypeInfoLValue LV,
   return Base;
 }

-unsigned APValue::LValueBase::getCallIndex() const {
+size_t APValue::LValueBase::getCallIndex() const {
   return is<TypeInfoLValue>() ? 0 : Local.CallIndex;
 }

@@ -730,7 +730,7 @@ ArrayRef<APValue::LValuePathEntry> APValue::getLValuePath() const {
   return llvm::makeArrayRef(LVal.getPath(), LVal.PathLength);
 }

-unsigned APValue::getLValueCallIndex() const {
+size_t APValue::getLValueCallIndex() const {
   assert(isLValue() && "Invalid accessor");
   return ((const LV*)(const char*)Data.buffer)->Base.getCallIndex();
 }
diff --git clang/lib/AST/ExprConstant.cpp clang/lib/AST/ExprConstant.cpp
index b4d02459746..e88118a9176 100644
--- clang/lib/AST/ExprConstant.cpp
+++ clang/lib/AST/ExprConstant.cpp
@@ -511,7 +511,7 @@ namespace {
     SourceLocation CallLoc;

     /// Index - The call index of this call.
-    unsigned Index;
+    size_t Index;

     /// The stack of integers for tracking version numbers for temporaries.
     SmallVector<unsigned, 2> TempVersionStack = {1};
@@ -720,12 +720,12 @@ namespace {
     unsigned CallStackDepth;

     /// NextCallIndex - The next call index to assign.
-    unsigned NextCallIndex;
+    size_t NextCallIndex;

     /// StepsLeft - The remaining number of evaluation steps we're permitted
     /// to perform. This is essentially a limit for the number of statements
     /// we will evaluate.
-    unsigned StepsLeft;
+    int StepsLeft;

     /// BottomFrame - The frame in which evaluation started. This must be
     /// initialized after CurrentCall and CallStackDepth.
@@ -881,12 +881,12 @@ namespace {
       return false;
     }

-    std::pair<CallStackFrame *, unsigned>
-    getCallFrameAndDepth(unsigned CallIndex) {
+    std::pair<CallStackFrame *, size_t>
+    getCallFrameAndDepth(size_t CallIndex) {
       assert(CallIndex && "no call index in getCallFrameAndDepth");
       // We will eventually hit BottomFrame, which has Index 1, so Frame can't
       // be null in this loop.
-      unsigned Depth = CallStackDepth;
+      size_t Depth = CallStackDepth;
       CallStackFrame *Frame = CurrentCall;
       while (Frame->Index > CallIndex) {
         Frame = Frame->Caller;
@@ -902,7 +902,8 @@ namespace {
         FFDiag(S->getBeginLoc(), diag::note_constexpr_step_limit_exceeded);
         return false;
       }
-      --StepsLeft;
+      if (StepsLeft > 0)
+        --StepsLeft;
       return true;
     }

@@ -1452,7 +1453,7 @@ namespace {
     const SubobjectDesignator &getLValueDesignator() const { return Designator;}
     bool isNullPointer() const { return IsNullPtr;}

-    unsigned getLValueCallIndex() const { return Base.getCallIndex(); }
+    size_t getLValueCallIndex() const { return Base.getCallIndex(); }
     unsigned getLValueVersion() const { return Base.getVersion(); }

     void moveInto(APValue &V) const {
